security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    role_hierarchy:
        ROLE_ADMIN: ['ROLE_MANAGER', 'ROLE_VIEW_SYSTEM_INFO', 'ROLE_VIEW_MESSAGE_HISTORY_ALL', 'ROLE_USERMANAGEMENT_ASSIGN_PRIVILEGED', 'ROLE_TRANSPORT_ADMINISTRATOR']
        ROLE_MANAGER: ['ROLE_SUPPORT', 'ROLE_MANAGE_RECIPIENTS', 'ROLE_USERMANAGEMENT_MANAGE', 'ROLE_MANAGE_PAGER_CONFIGURATION', 'ROLE_TRANSPORT_CONFIGURATION_VIEWER'] # User + manage users, groups, devices
        ROLE_SUPPORT: ['ROLE_ACTIVE_USER', 'ROLE_MANAGE_RECIPIENTS', 'ROLE_USERMANAGEMENT_VIEW', 'ROLE_MANAGE_PAGER_STATUS'] # User + manage users, groups, devices
        ROLE_ACTIVE_USER: ['ROLE_USER', 'ROLE_SEND'] # Info + send messages
        ROLE_USER: ['ROLE_ACCESS_WEB', 'ROLE_VIEW', 'ROLE_VIEW_MESSAGE_HISTORY'] # View only

        ROLE_ACCESS_WEB:
        ROLE_ACCESS_WEB_SEND:
        ROLE_ACCESS_WEB_ADMIN:

        ROLE_SEND: ['ROLE_SEND_TO_INDIVIDUALS', 'ROLE_SEND_TO_ROLES', 'ROLE_SEND_TO_GROUPS']
        ROLE_SEND_TO_INDIVIDUALS: ['ROLE_ACCESS_WEB_SEND']
        ROLE_SEND_TO_GROUPS: ['ROLE_ACCESS_WEB_SEND']
        ROLE_SEND_TO_ROLES: ['ROLE_ACCESS_WEB_SEND']

        ROLE_VIEW_MESSAGE_HISTORY: ['ROLE_VIEW_MESSAGE_HISTORY_RECEIVED_PERSONAL', 'ROLE_VIEW_MESSAGE_HISTORY_SENT_PERSONAL']
        ROLE_VIEW_MESSAGE_HISTORY_RECEIVED_PERSONAL:
        ROLE_VIEW_MESSAGE_HISTORY_SENT_PERSONAL:
        ROLE_VIEW_MESSAGE_HISTORY_ALL:

        ROLE_MANAGE_RECIPIENTS: ['ROLE_MANAGE_RECIPIENT_INDIVIDUALS', 'ROLE_MANAGE_RECIPIENT_GROUPS', 'ROLE_MANAGE_RECIPIENT_ROLES']
        ROLE_MANAGE_RECIPIENT_INDIVIDUALS: ['ROLE_VIEW_RECIPIENTS']
        ROLE_MANAGE_RECIPIENT_GROUPS: ['ROLE_VIEW_RECIPIENTS']
        ROLE_MANAGE_RECIPIENT_ROLES: ['ROLE_VIEW_RECIPIENTS']

        ROLE_MANAGE_PAGER_CONFIGURATION: ['ROLE_MANAGE_PAGER_STATUS'] # pager refers to pagers and channels
        ROLE_MANAGE_PAGER_STATUS: ['ROLE_VIEW_PAGER'] # pager refers to pagers and channels

        ROLE_TRANSPORT_ADMINISTRATOR: ['ROLE_TRANSPORT_CONFIGURATION_VIEWER']
        ROLE_TRANSPORT_CONFIGURATION_VIEWER: ['ROLE_ACCESS_WEB_ADMIN']

        ROLE_USERMANAGEMENT_MANAGE: ['ROLE_USERMANAGEMENT_ADDUSER', 'ROLE_USERMANAGEMENT_EDITUSER', 'ROLE_USERMANAGEMENT_DELETEUSER',]
        ROLE_USERMANAGEMENT_ADDUSER: ['ROLE_USERMANAGEMENT_VIEW']
        ROLE_USERMANAGEMENT_EDITUSER: ['ROLE_USERMANAGEMENT_VIEW']
        ROLE_USERMANAGEMENT_DELETEUSER: ['ROLE_USERMANAGEMENT_VIEW']
        ROLE_USERMANAGEMENT_VIEW: ['ROLE_ACCESS_WEB_ADMIN']
        ROLE_USERMANAGEMENT_ASSIGN_PRIVILEGED: # only admin

        ROLE_VIEW: ['ROLE_VIEW_RECIPIENTS', 'ROLE_VIEW_PAGER', 'ROLE_VIEW_DEVICES']
        ROLE_VIEW_RECIPIENTS:
        ROLE_VIEW_PAGER: # pager refers to pagers and channels
        ROLE_VIEW_DEVICES:

        ROLE_VIEW_SYSTEM_INFO:

    providers:
        app_user_provider:
            entity:
                class: App\Core\UserManagement\Model\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_ACCESS_WEB }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
